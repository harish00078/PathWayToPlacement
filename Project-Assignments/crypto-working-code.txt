<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Crypto Dashboard</title>

    <link rel="stylesheet" href="styles.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    
  </head>
  <body>
    <!-- here we have Navbar section -->
    <nav>
      <div class="left-nav">
        <a href="index.html " class="title">Crypto Tracker</a>
      </div>
      <div class="right-nav">
        <a href="index.html " class="nav-link">Home</a>
        <a href="favorites.html " class="nav-link">Favorites</a>
        <div class="search-container">
            <span class="search-icon">
                <i class="fa-solid fa-magnifying-glass"></i>
            </span>
            <input type="text" id="search-box" placeholder="search...">
        </div>
      </div>
    </nav>
    <!-- here we have main section -->
    <main>
        <table id="crypto-table"> 
            <thead>
                <tr>
                    <th>No.</th>
                    <th>Icon</th>
                    <th>Name</th>
                    <th>Price
                    <i id="sort-price-asc" class="fa-solid fa-arrow-up"></i>
                      <i id="sort-price-desc" class="fa-solid fa-arrow-down"></i>
                    </th>
                    <th>Volume
                        <i id="sort-volume-asc" class="fa-solid fa-arrow-up"></i>
                        <i id="sort-volume-desc" class="fa-solid fa-arrow-down"></i>
                    </th>
                    <th>Market Cap</th>
                    <th>Favorites</th>
                </tr>
            </thead>
            <tbody id="crypto-table-body">
   

            </tbody>
        </table>
        <div id="pagination">
            <div class="shimmer-container">
                <div class="shimmer">

                </div>
            </div>

        </div>
    </main>
    
    <script src="./js/app.js"></script>

  </body>
  </body>
</html>

* {
    font-family: "Montserrat", sans-serif;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  
  nav {
    display: flex;
    justify-content: space-between;
    height: 86px;
    border-bottom: 1px solid rgb(238, 238, 238);
    align-items: center;
    position: fixed;
    left: 0;
    right: 0;
    top: 0;
    z-index: 1000;
    background-color: rgb(255, 255, 255);
    padding: 0 20px;
  }
  
  .title {
    color: rgb(238, 188, 29);
    text-decoration: none;
    font-weight: 600;
  }
  
  .nav-link {
    text-decoration: none;
    font-size: 16px;
    font-weight: 500;
  }
  
  .right-nav {
    display: flex;
    gap: 60px;
    align-items: center;
  }
  
  #search-box {
    background-color: white;
    height: 36px;
    border: none;
    outline: none;
  }
  
  /* main-section: which will contain the table */
  
  main {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    margin-top: 100px;
  }
  
  table {
    width: 95%;
    border-collapse: collapse;
    margin-top: 20px;
  }
  
  th,
  td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: center;
  }
  
  th {
    background-color: #f4f4f4;
  }
  
  tr:hover {
    background-color: #f1f1f1;
    cursor: pointer;
  }
  
  .shimmer-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgb(255, 255, 255, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10;
    display: none;
  }
  .shimmer {
    width: 70px;
    height: 70px;
    border-radius: 50%;
    background: conic-gradient(#0000 10%, gold);
    -webkit-mask: radial-gradient(farthest-side, #0000 calc(100% - 9px), #000 0);
    animation: spin 1s infinite linear;
  }
  @keyframes spin {
    to {
      transform: rotate(1turn);
    }
  }
  #pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 20px 0px;
  }
  .page-button {
    margin: 0 5px;
    padding: 5px 10px;
    border: 1px solid #ccc;
    background-color: white;
    cursor: pointer;
  }
  .page-button.active {
    background-color: #4caf50;
    color: white;
  }
  .favorite-icon {
    cursor: pointer;
  }
  .favorite-icon:hover,
  .favorite {
    color: gold;
  }
  // get the shimmer container:
const shimmerContainer = document.querySelector(".shimmer-container");
// get the pagination container:
const paginationContainer = document.getElementById("pagination");

const options = {
  method: "GET",
  headers: {
    accept: "application/json",
    "x-cg-demo-api-key": "CG-bTUWVZGY95RCTnRdid3bdM79",
  },
};
let coins = [];
let itemsPerPage = 15;
let currentPage = 1;

// fetching the data from api:
const fetchCoins = async () => {
  try {
    const response = await fetch(
      "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false",
      options
    );
    console.log(response);
    const coinsData = await response.json();
    console.log("coinsData:", coinsData);
    return coinsData;
  } catch (error) {
    console.error("Error while fetching coins", error);
  }
};

const fetchFavouriteCoins = () => {
  return JSON.parse(localStorage.getItem("favorites")) || [];
};

// saving the (favourite-coins) in local storage:
const saveFavouriteCoins = (favourites) => {
  localStorage.setItem("favorites", JSON.stringify(favourites));
};

const handleFavClick = (element) => {
  // The id is retrieved from the dataset of the element that was clicked.
  // The dataset is an object of a HTML element that contains all the data-* attributes.
  // For example, if the element was <div data-id="bitcoin">, then element.dataset.id would be "bitcoin".
  console.log(element.dataset.id);

  let favourites = fetchFavouriteCoins();
  if (favourites.includes(element.dataset.id)) {
    favourites = favourites.filter((id) => id !== element.dataset.id);
  }

  favourites.push(element.dataset.id);
  saveFavouriteCoins(favourites);
  // displayCoins(getCoinsToDisplay(coins, currentPage), currentPage);
};

// => function for shimmer:
// show shimmer function:
const showShimmer = () => {
  shimmerContainer.style.display = "flex";
};
// hide shimmer function:
const hideShimmer = () => {
  shimmerContainer.style.display = "none";
};

const getCoinsToDisplay = (coins, page) => {
  const start = (page - 1) * itemsPerPage;
  const end = start + itemsPerPage;
  return coins.slice(start, end);
};

const displayCoins = (coins, currentPage) => {
  const start = (currentPage - 1) * itemsPerPage + 1;
  const favourites = fetchFavouriteCoins();

  const tableBody = document.getElementById("crypto-table-body");
  tableBody.innerHTML = "";
  coins.forEach((coin, index) => {
    const row = document.createElement("tr");
    const isFavourite = favourites.includes(coin.id);
    row.innerHTML = `           
                <td>${start + index}</td>
                <td><img width="24" height="24" src=${coin.image}alt=${
      coin.name
    }></td>
                <td>${coin.name}</td>
                <td>$${coin.current_price}</td>
                <td>$${coin.total_volume}</td>
                <td>$${coin.market_cap}</td>
                <td><i class="fa-solid fa-star favorite-icon ${
                  isFavourite ? "favorite" : ""
                }" data-id="${coin.id}"onClick=handleFavClick(this)"></i></td>
              `;
    // row.querySelector(".favourite-icon").addEventListener("click", (event) => {
    //   event.stopPropagation();
    //   handleFavClick(coin.id);

    // });
    tableBody.appendChild(row);
  });
};

// creating pagination:
// IMP = we did not using pagination api-data in this application:we are using the simple api-data:so that's why here we are trying to create pagination by ourselves.
const renderPagination = (coins) => {
  const totalPages = Math.ceil(coins.length / itemsPerPage);
  paginationContainer.innerHTML = "";
  for (let i = 1; i <= totalPages; i++) {
    const pageBtn = document.createElement("button");
    // adding the text-content with in the button:
    pageBtn.textContent = i;
    pageBtn.classList.add("page-button");
    if (i === currentPage) {
      pageBtn.classList.add("active");
    }
    // allow click over the button:
    pageBtn.addEventListener("click", () => {
      currentPage = i;
      displayCoins(getCoinsToDisplay(coins, currentPage), currentPage);
      updatePaginationButtons();
    });
    paginationContainer.appendChild(pageBtn);
  }
};
const updatePaginationButtons = () => {
  const pageBtn = document.querySelectorAll(".page-button");
  pageBtn.forEach((button, index) => {
    if (index + 1 === currentPage) {
      button.classList.add("active");
    } else {
      button.classList.remove("active");
    }
  });
};

// showing the data:
document.addEventListener("DOMContentLoaded", async () => {
  try {
    showShimmer();
    coins = await fetchCoins();
    displayCoins(getCoinsToDisplay(coins, currentPage), currentPage);
    renderPagination(coins);
    hideShimmer();
    console.log("coins:", coins);
  } catch (error) {
    console.log(error);
    hideShimmer();
  }
});


